---
.if_version_6: &if_version_6
  if: $RELEASE_VERSION_6 != ""

.if_version_7: &if_version_7
  if: $RELEASE_VERSION_7 != ""

.docker_hub_variables: &docker_hub_variables
  DOCKER_REGISTRY_LOGIN_SSM_KEY: docker_hub_login
  DOCKER_REGISTRY_PWD_SSM_KEY: docker_hub_pwd
  DELEGATION_KEY_SSM_KEY: docker_hub_signing_key
  DELEGATION_PASS_SSM_KEY: docker_hub_signing_pass
  DOCKER_REGISTRY_URL: docker.io
  SRC_AGENT: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
  SRC_DSD: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/dogstatsd
  SRC_DCA: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/cluster-agent

.docker_build_windows_job_definition:
  stage: image_build
  variables:
    <<: *docker_hub_variables
  before_script:
    - $ErrorActionPreference = "Stop"
    - mkdir ci-scripts
    - |
      @"
      Set-PSDebug -Trace 1
      `$ErrorActionPreference = "Stop"
      pip3 install -r requirements.txt
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # ECR Login
      `$AWS_ECR_PASSWORD = aws ecr get-login-password --region us-east-1
      docker login --username AWS --password "`${AWS_ECR_PASSWORD}" 486234852809.dkr.ecr.us-east-1.amazonaws.com
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # DockerHub login
      `$DOCKER_REGISTRY_LOGIN = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_LOGIN_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      `$DOCKER_REGISTRY_PWD = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_PWD_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      docker login --username "`${DOCKER_REGISTRY_LOGIN}" --password "`${DOCKER_REGISTRY_PWD}" "${DOCKER_REGISTRY_URL}"
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | out-file ci-scripts/docker-login.ps1


# build agent7_windows image
docker_build_agent7_windows1809:
  extends: .docker_build_windows_job_definition
  rules:
    - <<: *if_version_7
      when: on_success
  tags: ["runner:windows-docker", "windowsversion:1809"]
  needs: ["windows_msi_and_bosh_zip_x64-a7", "build_windows_container_entrypoint"]
  variables:
    IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
    BUILD_CONTEXT: Dockerfiles/agent
    TAG_SUFFIX: -7
    BUILD_ARG: --build-arg BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-1809 --build-arg WITH_JMX=false
    VARIANT: 1809
  script:
    - $ErrorActionPreference = "Stop"
    - $TARGET_TAG = "${IMAGE}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}${TAG_SUFFIX}-win1809-amd64"
    - cp ${OMNIBUS_PACKAGE_DIR}/datadog-agent-7*-x86_64.zip ${BUILD_CONTEXT}/datadog-agent-7-latest.amd64.zip
    - cp entrypoint.exe ${BUILD_CONTEXT}/entrypoint.exe
    - get-childitem ${BUILD_CONTEXT}
    # Docker setup
    - cat ci-scripts/docker-login.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-login.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - powershell -Command "docker build ${BUILD_ARG} --pull --file ${BUILD_CONTEXT}/windows/amd64/Dockerfile --tag ${TARGET_TAG} ${BUILD_CONTEXT}"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker push ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker rmi ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

docker_build_agent7_windows1809_jmx:
  extends: .docker_build_windows_job_definition
  rules:
    - <<: *if_version_7
      when: on_success
  tags: ["runner:windows-docker", "windowsversion:1809"]
  needs: ["windows_msi_and_bosh_zip_x64-a7", "build_windows_container_entrypoint"]
  variables:
    IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
    BUILD_CONTEXT: Dockerfiles/agent
    TAG_SUFFIX: -7-jmx
    BUILD_ARG: --build-arg BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-1809 --build-arg WITH_JMX=true
    VARIANT: 1809
  script:
    - $ErrorActionPreference = "Stop"
    - $TARGET_TAG = "${IMAGE}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}${TAG_SUFFIX}-win1809-amd64"
    - cp ${OMNIBUS_PACKAGE_DIR}/datadog-agent-7*-x86_64.zip ${BUILD_CONTEXT}/datadog-agent-7-latest.amd64.zip
    - cp entrypoint.exe ${BUILD_CONTEXT}/entrypoint.exe
    - get-childitem ${BUILD_CONTEXT}
    # Docker setup
    - cat ci-scripts/docker-login.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-login.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - powershell -Command "docker build ${BUILD_ARG} --pull --file ${BUILD_CONTEXT}/windows/amd64/Dockerfile --tag ${TARGET_TAG} ${BUILD_CONTEXT}"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker push ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker rmi ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

# build agent7_windows image
docker_build_agent7_windows1909:
  extends: .docker_build_windows_job_definition
  rules:
    - <<: *if_version_7
      when: on_success
  tags: ["runner:windows-docker", "windowsversion:1909"]
  needs: ["windows_msi_and_bosh_zip_x64-a7", "build_windows_container_entrypoint"]
  variables:
    IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
    BUILD_CONTEXT: Dockerfiles/agent
    TAG_SUFFIX: -7
    BUILD_ARG: --build-arg BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-1909 --build-arg WITH_JMX=false
    VARIANT: 1909
  script:
    - $ErrorActionPreference = "Stop"
    - $TARGET_TAG = "${IMAGE}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}${TAG_SUFFIX}-win1909-amd64"
    - cp ${OMNIBUS_PACKAGE_DIR}/datadog-agent-7*-x86_64.zip ${BUILD_CONTEXT}/datadog-agent-7-latest.amd64.zip
    - cp entrypoint.exe ${BUILD_CONTEXT}/entrypoint.exe
    - get-childitem ${BUILD_CONTEXT}
    # Docker setup
    - cat ci-scripts/docker-login.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-login.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - powershell -Command "docker build ${BUILD_ARG} --pull --file ${BUILD_CONTEXT}/windows/amd64/Dockerfile --tag ${TARGET_TAG} ${BUILD_CONTEXT}"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker push ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker rmi ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

docker_build_agent7_windows1909_jmx:
  extends: .docker_build_windows_job_definition
  rules:
    - <<: *if_version_7
      when: on_success
  tags: ["runner:windows-docker", "windowsversion:1909"]
  needs: ["windows_msi_and_bosh_zip_x64-a7", "build_windows_container_entrypoint"]
  variables:
    IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
    BUILD_CONTEXT: Dockerfiles/agent
    TAG_SUFFIX: -7-jmx
    BUILD_ARG: --build-arg BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-1909 --build-arg WITH_JMX=true
    VARIANT: 1909
  script:
    - $ErrorActionPreference = "Stop"
    - $TARGET_TAG = "${IMAGE}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}${TAG_SUFFIX}-win1909-amd64"
    - cp ${OMNIBUS_PACKAGE_DIR}/datadog-agent-7*-x86_64.zip ${BUILD_CONTEXT}/datadog-agent-7-latest.amd64.zip
    - cp entrypoint.exe ${BUILD_CONTEXT}/entrypoint.exe
    - get-childitem ${BUILD_CONTEXT}
    # Docker setup
    - cat ci-scripts/docker-login.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-login.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - powershell -Command "docker build ${BUILD_ARG} --pull --file ${BUILD_CONTEXT}/windows/amd64/Dockerfile --tag ${TARGET_TAG} ${BUILD_CONTEXT}"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker push ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker rmi ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
