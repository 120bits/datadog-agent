---
.if_version_7: &if_version_7
  if: $RELEASE_VERSION_7 != ""

.if_not_version_7: &if_not_version_7
  if: $RELEASE_VERSION_7 == ""

.if_master_branch: &if_master_branch
  if: $CI_COMMIT_BRANCH == "master"

.if_deploy_on_nightly: &if_deploy_on_nightly
  if: $DEPLOY_AGENT == "true" && $RELEASE_VERSION_6 == "nightly" && $RELEASE_VERSION_7 == "nightly-a7"

.docker_hub_variables: &docker_hub_variables
  DOCKER_REGISTRY_LOGIN_SSM_KEY: docker_hub_login
  DOCKER_REGISTRY_PWD_SSM_KEY: docker_hub_pwd
  DELEGATION_KEY_SSM_KEY: docker_hub_signing_key
  DELEGATION_PASS_SSM_KEY: docker_hub_signing_pass
  DOCKER_REGISTRY_URL: docker.io
  SRC_AGENT: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
  SRC_DSD: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/dogstatsd
  SRC_DCA: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/cluster-agent

.google_container_registry_variables: &google_container_registry_variables
  <<: *docker_hub_variables
  DOCKER_REGISTRY_LOGIN_SSM_KEY: gcr_login
  DOCKER_REGISTRY_PWD_SSM_KEY: gcr_pwd
  GOOGLE_PROJECT_ID: datadoghq

.docker_tag_windows_job_definition:
  stage: image_deploy
  variables:
    <<: *docker_hub_variables
  before_script:
    - $ErrorActionPreference = "Stop"
    - $SRC_TAG = "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    - mkdir ci-scripts
    - |
      @"
      Set-PSDebug -Trace 1
      `$ErrorActionPreference = "Stop"
      pip3 install -r requirements.txt
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # ECR Login
      `$AWS_ECR_PASSWORD = aws ecr get-login-password --region us-east-1
      docker login --username AWS --password "`${AWS_ECR_PASSWORD}" 486234852809.dkr.ecr.us-east-1.amazonaws.com
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # DockerHub login
      `$DOCKER_REGISTRY_LOGIN = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_LOGIN_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      `$DOCKER_REGISTRY_PWD = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_PWD_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      docker login --username "`${DOCKER_REGISTRY_LOGIN}" --password "`${DOCKER_REGISTRY_PWD}" "${DOCKER_REGISTRY_URL}"
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # DockerHub image signing
      `$Env:DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DELEGATION_PASS_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      `$Env:NOTARY_DELEGATION_PASSPHRASE = `$Env:DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE
      `$Env:NOTARY_AUTH = "`${DOCKER_REGISTRY_LOGIN}:`${DOCKER_REGISTRY_PWD}"
      `$bytes = [System.Text.Encoding]::Unicode.GetBytes(`$Env:NOTARY_AUTH)
      `$Env:NOTARY_AUTH = [Convert]::ToBase64String(`$bytes)
      aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DELEGATION_KEY_SSM_KEY} --with-decryption --query "Parameter.Value" --out text | Set-Content -Encoding ASCII docker.key
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      docker trust key load `$PWD\docker.key
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      Remove-Item `$PWD\docker.key
      ridk enable # This is only needed because invoke docker.publish-manifest calls "cat" which doesn't exist on Windows
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | out-file ci-scripts/docker-publish.ps1

.google_container_registry_tag_windows_job_definition:
  stage: image_deploy
  variables:
    <<: *google_container_registry_variables
  before_script:
    - $ErrorActionPreference = "Stop"
    - $SRC_TAG = "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    - mkdir ci-scripts
    - mkdir tmp
    - |
      @"
      Set-PSDebug -Trace 1
      `$ErrorActionPreference = "Stop"
      pip3 install -r requirements.txt
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # ECR Login
      `$AWS_ECR_PASSWORD = aws ecr get-login-password --region us-east-1
      docker login --username AWS --password "`${AWS_ECR_PASSWORD}" 486234852809.dkr.ecr.us-east-1.amazonaws.com
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # GCR Login
      `$DOCKER_REGISTRY_LOGIN = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_LOGIN_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_PWD_SSM_KEY} --with-decryption --query "Parameter.Value" --out text | Set-Content gcr_key.json
      gcloud --no-user-output-enabled auth activate-service-account "`${DOCKER_REGISTRY_LOGIN}" --key-file=gcr_key.json
      gcloud config set project ${GOOGLE_PROJECT_ID}
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # DockerHub login
      `$ACCESS_TOKEN = gcloud auth print-access-token
      docker login -u oauth2accesstoken -p "`${ACCESS_TOKEN}" https://gcr.io
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      ridk enable # This is only needed because invoke docker.publish-manifest calls "cat" which doesn't exist on Windows
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | out-file ci-scripts/gcr-publish.ps1

dev_branch_docker_hub-a7-windows:
  extends: .docker_tag_windows_job_definition
  rules:
    - <<: *if_version_7
      when: manual
      allow_failure: true
  ## For Future Reference. Must update to do this job from the newest OS version
  ## that we're publishing (.e.g. adding windows2104 will require also using the
  ## 2104 builder)
  tags: ["runner:windows-docker", "windowsversion:2004"]
  needs:
    - docker_build_agent7_windows1809
    - docker_build_agent7_windows1809_jmx
    - docker_build_agent7_windows1909
    - docker_build_agent7_windows1909_jmx
    - docker_build_agent7_windows2004
    - docker_build_agent7_windows2004_jmx
  variables:
    VARIANT: 2004
  script:
    - $ErrorActionPreference = "Stop"
    - |
      @"
      # On newer Kernel we can pull/push older images even though these images won't run
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win1809-amd64 datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-win1809
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win1809-amd64 datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-jmx-win1809
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win1909-amd64 datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-win1909
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win1909-amd64 datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-jmx-win1909
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win2004-amd64 datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-win2004
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win2004-amd64 datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-jmx-win2004
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish-manifest --signed-push --name datadog/agent-dev --tag ${CI_COMMIT_REF_SLUG}-py3-win --image datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-win1809,windows/amd64 --image datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-win1909,windows/amd64 --image datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-win2004,windows/amd64
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish-manifest --signed-push --name datadog/agent-dev --tag ${CI_COMMIT_REF_SLUG}-py3-jmx-win --image datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-jmx-win1809,windows/amd64 --image datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-jmx-win1909,windows/amd64 --image datadog/agent-dev:${CI_COMMIT_REF_SLUG}-py3-jmx-win2004,windows/amd64
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | Add-Content ci-scripts/docker-publish.ps1
    - cat ci-scripts/docker-publish.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-publish.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

dev_master_docker_hub-a7-windows:
  extends: .docker_tag_windows_job_definition
  rules:
    - <<: *if_not_version_7
      when: never
    - <<: *if_master_branch
  ## For Future Reference. Must update to do this job from the newest OS version
  ## that we're publishing (.e.g. adding windows2104 will require also using the
  ## 2104 builder)
  tags: ["runner:windows-docker", "windowsversion:2004"]
  needs:
    - docker_build_agent7_windows1809
    - docker_build_agent7_windows1809_jmx
    - docker_build_agent7_windows1909
    - docker_build_agent7_windows1909_jmx
    - docker_build_agent7_windows2004
    - docker_build_agent7_windows2004_jmx
  variables:
    VARIANT: 2004
  script:
    - $ErrorActionPreference = "Stop"
    - |
      @"
      # On newer Kernel we can pull/push older images even though these images won't run
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win1809-amd64 datadog/agent-dev:master-py3-win1809
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win1809-amd64 datadog/agent-dev:master-py3-jmx-win1809
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win1909-amd64 datadog/agent-dev:master-py3-win1909
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win1909-amd64 datadog/agent-dev:master-py3-jmx-win1909
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win2004-amd64 datadog/agent-dev:master-py3-win2004
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win2004-amd64 datadog/agent-dev:master-py3-jmx-win2004
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish-manifest --signed-push --name datadog/agent-dev --tag master-py3-win --image datadog/agent-dev:master-py3-win1809,windows/amd64 --image datadog/agent-dev:master-py3-win1909,windows/amd64 --image datadog/agent-dev:master-py3-win2004,windows/amd64
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish-manifest --signed-push --name datadog/agent-dev --tag master-py3-jmx-win --image datadog/agent-dev:master-py3-jmx-win1809,windows/amd64 --image datadog/agent-dev:master-py3-jmx-win1909,windows/amd64 --image datadog/agent-dev:master-py3-jmx-win2004,windows/amd64
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | Add-Content ci-scripts/docker-publish.ps1
    - cat ci-scripts/docker-publish.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-publish.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

dev_nightly_docker_hub-a7-windows:
  extends: .docker_tag_windows_job_definition
  rules:
    - <<: *if_not_version_7
      when: never
    - <<: *if_deploy_on_nightly
  ##
  ## For Future Reference.  Must update to do this job from the newest OS version
  ## that we're publishing (.e.g. adding windows2104 will require also using the
  ## 2104 builder)
  tags: ["runner:windows-docker", "windowsversion:2004"]
  needs:
    - docker_build_agent7_windows1809
    - docker_build_agent7_windows1809_jmx
    - docker_build_agent7_windows1909
    - docker_build_agent7_windows1909_jmx
    - docker_build_agent7_windows2004
    - docker_build_agent7_windows2004_jmx
  variables:
    VARIANT: 2004
  script:
    - $ErrorActionPreference = "Stop"
    - |
      @"
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win1809-amd64 datadog/agent-dev:nightly-${CI_COMMIT_SHORT_SHA}-py3-win1809
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win1809-amd64 datadog/agent-dev:nightly-${CI_COMMIT_SHORT_SHA}-py3-jmx-win1809
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win1909-amd64 datadog/agent-dev:nightly-${CI_COMMIT_SHORT_SHA}-py3-win1909
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win1909-amd64 datadog/agent-dev:nightly-${CI_COMMIT_SHORT_SHA}-py3-jmx-win1909
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-win2004-amd64 datadog/agent-dev:nightly-${CI_COMMIT_SHORT_SHA}-py3-win2004
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      inv -e docker.publish --signed-push ${SRC_AGENT}:${SRC_TAG}-7-jmx-win2004-amd64 datadog/agent-dev:nightly-${CI_COMMIT_SHORT_SHA}-py3-jmx-win2004
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | Add-Content ci-scripts/docker-publish.ps1
    - cat ci-scripts/docker-publish.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64:${Env:DATADOG_AGENT_WINBUILDIMAGES} powershell -C C:\mnt\ci-scripts\docker-publish.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
