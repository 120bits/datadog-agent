syntax = "proto3";

package pb;

import "google/api/annotations.proto";

// The greeting service definition.
service Agent {
    // get the hostname
    rpc GetHostname (HostnameRequest) returns (HostnameReply) {
        option (google.api.http) = {
            get: "/v1/grpc/host"
        };
    }
}

service AgentSecure {
    // subscribes to added, removed, or changed entities in the Tagger
    // and streams them to clients as events.
    // can be called through the HTTP gateway, and events will be streamed as JSON:
    //   $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
    //      -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
    //   {
    //    "result": {
    //        "entity": {
    //            "id": {
    //                "prefix": "kubernetes_pod_uid",
    //                "uid": "4025461f832caf3fceb7fc2a32f879c6"
    //            },
    //            "hash": "cad4fc8fc409fcc1",
    //            "lowCardinalityTags": [
    //                "kube_namespace:kube-system",
    //                "pod_phase:running"
    //            ]
    //        }
    //    }
    //}
    rpc TaggerStreamEntities(StreamTagsRequest) returns (stream StreamTagsResponse) {
        option (google.api.http) = {
            post: "/v1/grpc/tagger/stream_entities"
            body: "*"
        };
    };

    // fetches an entity from the Tagger with the desired cardinality tags.
    // can be called through the HTTP gateway, and entity will be returned as JSON:
    //   $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
    //      -XPOST -k -H "Content-Type: application/json" \
    //      --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
    //      https://localhost:5001/v1/grpc/tagger/fetch_entity
    //   {
    //    "id": {
    //        "prefix": "kubernetes_pod_uid",
    //        "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
    //    },
    //    "tags": [
    //        "kube_namespace:kube-system",
    //        "pod_phase:running",
    //        "kube_deployment:coredns",
    //        "kube_service:kube-dns"
    //    ]
    //}
    rpc TaggerFetchEntity(FetchEntityRequest) returns (FetchEntityResponse) {
        option (google.api.http) = {
            post: "/v1/grpc/tagger/fetch_entity"
            body: "*"
        };
    };
}


// Hostname
message HostnameRequest {}

// The response message containing the requested hostname
message HostnameReply {
    string hostname = 1;
}

// Tagger
message StreamTagsRequest {
    TagCardinality cardinality = 1;
    Filter includeFilter = 2;
    Filter excludeFilter = 3;
}

message StreamTagsResponse {
    EventType type = 1;
    Entity entity = 2;
}

enum EventType {
    ADDED = 0;
    MODIFIED = 1;
    DELETED = 2;
}

enum TagCardinality {
    LOW = 0;
    ORCHESTRATOR = 1;
    HIGH = 2;
}

message Filter {
    string kubeNamespace = 1;
    string image = 2;
    string containerName = 3;
}

message Entity {
    EntityId id = 1;
    string hash = 2;
    repeated string highCardinalityTags = 3;
    repeated string orchestratorCardinalityTags = 4;
    repeated string lowCardinalityTags = 5;
    repeated string standardTags = 6;
}

message FetchEntityRequest {
    EntityId id = 1;
    TagCardinality cardinality = 2;
}

message FetchEntityResponse {
    EntityId id = 1;
    TagCardinality cardinality = 2;
    repeated string tags = 3;
}

message EntityId {
    string prefix = 1;
    string uid = 2;
}


// Flare

enum FlareLogLevel {
    TRACE = 0;
    DEBUG = 1;
    INFO  = 2;
    WARN  = 3;
    ERROR = 4;
}

message FlareHeartbeatRequest {
    string tracer_identifier = 1;
    string tracer_service = 2;
    string tracer_environment = 3;
}

message FlareHeartbeatResponse {
    message Trigger {
        string flare_identifier = 1;   // Identifier that the tracer
                                      // should supply with the log
                                      // request to be able to
                                      // correlate the log lines with
                                      // a specific flare request.
        FlareLogLevel log_level = 2;  // Which log level the tracer
                                      // should switch to.
        int64 end_time  = 3;          // For how long should the dump
                                      // logs be sent to the agent.
                                      // Can be 0 to only send the
                                      // initialization logs and
                                      // exception logs that the tracer
                                      // might have collected during
                                      // its normal operation.
    }
    Trigger trigger = 1;     // The flare heartbeat response
                             // should be empty if no flare
                             // should be triggered on the
                             // tracer side.
}

message FlareQueryRequest {
    FlareHeartbeatRequest query = 1;
}

message FlareQueryResponse {
    repeated FlareHeartbeatRequest answer = 1;
}


message FlareLogRequest {
    string flare_identifier = 1;
    string tracer_identifier = 2;

    message LogLine {
        // relevant?
        FlareLogLevel log_level = 1;
        string message = 2;
    }
    repeated LogLine logs = 3; // log messages

}

message FlareLogResponse {
    string stop_reason = 1; // Human readable reason why the
                            // tracer should stop sending
                            // logs.
}
